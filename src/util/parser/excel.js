// Generated automatically by nearley, version 2.19.0
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }
 /* eslint-disable */ var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "dqstring$ebnf$1", "symbols": []},
    {"name": "dqstring$ebnf$1", "symbols": ["dqstring$ebnf$1", "dstrchar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "dqstring", "symbols": [{"literal":"\""}, "dqstring$ebnf$1", {"literal":"\""}], "postprocess": function(d) {return d[1].join(""); }},
    {"name": "sqstring$ebnf$1", "symbols": []},
    {"name": "sqstring$ebnf$1", "symbols": ["sqstring$ebnf$1", "sstrchar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "sqstring", "symbols": [{"literal":"'"}, "sqstring$ebnf$1", {"literal":"'"}], "postprocess": function(d) {return d[1].join(""); }},
    {"name": "btstring$ebnf$1", "symbols": []},
    {"name": "btstring$ebnf$1", "symbols": ["btstring$ebnf$1", /[^`]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "btstring", "symbols": [{"literal":"`"}, "btstring$ebnf$1", {"literal":"`"}], "postprocess": function(d) {return d[1].join(""); }},
    {"name": "dstrchar", "symbols": [/[^\\"\n]/], "postprocess": id},
    {"name": "dstrchar", "symbols": [{"literal":"\\"}, "strescape"], "postprocess": 
        function(d) {
            return JSON.parse("\""+d.join("")+"\"");
        }
        },
    {"name": "sstrchar", "symbols": [/[^\\'\n]/], "postprocess": id},
    {"name": "sstrchar", "symbols": [{"literal":"\\"}, "strescape"], "postprocess": function(d) { return JSON.parse("\""+d.join("")+"\""); }},
    {"name": "sstrchar$string$1", "symbols": [{"literal":"\\"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "sstrchar", "symbols": ["sstrchar$string$1"], "postprocess": function(d) {return "'"; }},
    {"name": "strescape", "symbols": [/["\\\/bfnrt]/], "postprocess": id},
    {"name": "strescape", "symbols": [{"literal":"u"}, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/, /[a-fA-F0-9]/], "postprocess": 
        function(d) {
            return d.join("");
        }
        },
    {"name": "list", "symbols": ["l_or"], "postprocess": id},
    {"name": "list", "symbols": ["l_or", {"literal":","}, "list"], "postprocess": ([fst, _, snd]) => ({ type: 'list',  val: [fst, snd] })},
    {"name": "l_or", "symbols": ["l_and"], "postprocess": id},
    {"name": "l_or$string$1", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "l_or", "symbols": ["l_or", "l_or$string$1", "l_and"], "postprocess": ([fst, _, snd]) => ({ type: 'or',  val: [fst, snd] })},
    {"name": "l_and", "symbols": ["cond_1"], "postprocess": id},
    {"name": "l_and$string$1", "symbols": [{"literal":"&"}, {"literal":"&"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "l_and", "symbols": ["l_and", "l_and$string$1", "cond_1"], "postprocess": ([fst, _, snd]) => ({ type: 'and', val: [fst, snd] })},
    {"name": "cond_1", "symbols": ["cond_2"], "postprocess": id},
    {"name": "cond_1$string$1", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "cond_1", "symbols": ["cond_1", "cond_1$string$1", "cond_2"], "postprocess": ([fst, _, snd]) => ({ type: 'inequality',  val: [fst, snd] })},
    {"name": "cond_1$string$2", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "cond_1", "symbols": ["cond_1", "cond_1$string$2", "cond_2"], "postprocess": ([fst, _, snd]) => ({ type: 'equality',    val: [fst, snd] })},
    {"name": "cond_2", "symbols": ["arith_1"], "postprocess": id},
    {"name": "cond_2", "symbols": ["cond_2", {"literal":">"}, "arith_1"], "postprocess": ([fst, _, snd]) => ({ type: 'greater_than',          val: [fst, snd] })},
    {"name": "cond_2", "symbols": ["cond_2", {"literal":"<"}, "arith_1"], "postprocess": ([fst, _, snd]) => ({ type: 'less_than',             val: [fst, snd] })},
    {"name": "cond_2$string$1", "symbols": [{"literal":">"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "cond_2", "symbols": ["cond_2", "cond_2$string$1", "arith_1"], "postprocess": ([fst, _, snd]) => ({ type: 'greater_than_or_equal', val: [fst, snd] })},
    {"name": "cond_2$string$2", "symbols": [{"literal":"<"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "cond_2", "symbols": ["cond_2", "cond_2$string$2", "arith_1"], "postprocess": ([fst, _, snd]) => ({ type: 'less_than_or_equal',    val: [fst, snd] })},
    {"name": "arith_1", "symbols": ["arith_2"], "postprocess": id},
    {"name": "arith_1", "symbols": ["arith_1", {"literal":"-"}, "arith_2"], "postprocess": ([fst, _, snd]) => ({ type: 'subtraction', val: [fst, snd] })},
    {"name": "arith_1", "symbols": ["arith_1", {"literal":"+"}, "arith_2"], "postprocess": ([fst, _, snd]) => ({ type: 'addition',    val: [fst, snd] })},
    {"name": "arith_2", "symbols": ["power"], "postprocess": id},
    {"name": "arith_2", "symbols": ["arith_2", {"literal":"*"}, "power"], "postprocess": ([fst, _, snd]) => ({ type: 'multiplication',  val: [fst, snd] })},
    {"name": "arith_2", "symbols": ["arith_2", {"literal":"/"}, "power"], "postprocess": ([fst, _, snd]) => ({ type: 'division',        val: [fst, snd] })},
    {"name": "arith_2", "symbols": ["arith_2", {"literal":"%"}, "power"], "postprocess": ([fst, _, snd]) => ({ type: 'modulo',          val: [fst, snd] })},
    {"name": "power", "symbols": ["unary"], "postprocess": id},
    {"name": "power", "symbols": ["power", {"literal":"^"}, "unary"], "postprocess": ([fst, _, snd]) => ({ type: 'power', val: [fst, snd] })},
    {"name": "unary", "symbols": ["call"], "postprocess": id},
    {"name": "unary", "symbols": [{"literal":"!"}, "call"], "postprocess": ([_, fst,]) => ({ type: 'unary_negation',  val: fst })},
    {"name": "unary", "symbols": [{"literal":"+"}, "call"], "postprocess": ([_, fst,]) => ({ type: 'unary_plus',      val: fst })},
    {"name": "unary", "symbols": [{"literal":"-"}, "call"], "postprocess": ([_, fst,]) => ({ type: 'unary_minus',     val: fst })},
    {"name": "call", "symbols": ["range"], "postprocess": id},
    {"name": "call", "symbols": ["id", {"literal":"("}, "list", {"literal":")"}], "postprocess": ([fst, _, snd, __]) => ({ type: 'call', fn: fst, val: snd })},
    {"name": "range", "symbols": ["parenthesis"], "postprocess": id},
    {"name": "range", "symbols": ["cell", {"literal":":"}, "cell"], "postprocess": ([fst, _, snd]) => ({ type: 'range', val: [fst, snd] })},
    {"name": "range", "symbols": ["column", {"literal":":"}, "column"], "postprocess": ([fst, _, snd]) => ({ type: 'range', val: [fst, snd] })},
    {"name": "range", "symbols": ["row", {"literal":":"}, "row"], "postprocess": ([fst, _, snd]) => ({ type: 'range', val: [fst, snd] })},
    {"name": "parenthesis", "symbols": ["value"], "postprocess": id},
    {"name": "parenthesis", "symbols": [{"literal":"("}, "list", {"literal":")"}], "postprocess": ([_, fst, __]) => ({ type: 'parenthesis', val: fst })},
    {"name": "value", "symbols": ["_", "id", "_"], "postprocess": ([_, fst, __]) => fst},
    {"name": "value", "symbols": ["_", "primitive", "_"], "postprocess": ([_, fst, __]) => fst},
    {"name": "primitive", "symbols": ["boolean"], "postprocess": ([fst]) => ({ type: 'boolean', val: fst.toLowerCase() === 'true' })},
    {"name": "primitive", "symbols": ["number"], "postprocess": ([fst]) => ({ type: 'number', val: fst })},
    {"name": "primitive", "symbols": ["string"], "postprocess": ([fst]) => ({ type: 'string', val: fst })},
    {"name": "id$ebnf$1", "symbols": []},
    {"name": "id$ebnf$1", "symbols": ["id$ebnf$1", /[_a-zA-Z\d]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "id", "symbols": [/[_a-zA-Z]/, "id$ebnf$1"], "postprocess": ([fst, snd]) => ({ type: 'identifier',  val: fst + (snd ? snd.join('') : '') })},
    {"name": "number$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$1", "symbols": ["number$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$1"], "postprocess": ([fst]) => parseInt(fst.join(''), 10)},
    {"name": "number$ebnf$2", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$2", "symbols": ["number$ebnf$2", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$3$subexpression$1$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$3$subexpression$1$ebnf$1", "symbols": ["number$ebnf$3$subexpression$1$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$3$subexpression$1", "symbols": ["number$ebnf$3$subexpression$1$ebnf$1"]},
    {"name": "number$ebnf$3", "symbols": ["number$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "number$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number", "symbols": ["number$ebnf$2", {"literal":"."}, "number$ebnf$3"], "postprocess": ([fst, _, snd]) => parseFloat(fst.join('') + (snd ? '.' + snd.join('') : ''))},
    {"name": "number$ebnf$4", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$4", "symbols": ["number$ebnf$4", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$5", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$5", "symbols": ["number$ebnf$5", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$6", "symbols": [/[+-]/], "postprocess": id},
    {"name": "number$ebnf$6", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number$ebnf$7", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$7", "symbols": ["number$ebnf$7", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$4", {"literal":"."}, "number$ebnf$5", /[eE]/, "number$ebnf$6", "number$ebnf$7"], "postprocess": ([fst, _, snd, __, trd, fth]) => parseFloat(fst.join('') + '.' + snd.join('') + 'e' + (trd || '+') + fth.join(''))},
    {"name": "number$ebnf$8", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$8", "symbols": ["number$ebnf$8", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number$ebnf$9", "symbols": [/[+-]/], "postprocess": id},
    {"name": "number$ebnf$9", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "number$ebnf$10", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$10", "symbols": ["number$ebnf$10", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$8", /[eE]/, "number$ebnf$9", "number$ebnf$10"], "postprocess": ([fst, _, snd, trd]) => parseFloat(fst.join('') + 'e' + (snd || '+') + trd.join(''))},
    {"name": "string", "symbols": ["dqstring"], "postprocess": id},
    {"name": "string", "symbols": ["sqstring"], "postprocess": id},
    {"name": "boolean$string$1", "symbols": [{"literal":"t"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "boolean", "symbols": ["boolean$string$1"], "postprocess": id},
    {"name": "boolean$string$2", "symbols": [{"literal":"f"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "boolean", "symbols": ["boolean$string$2"], "postprocess": id},
    {"name": "cell", "symbols": ["column", "row"], "postprocess": id},
    {"name": "column", "symbols": ["id"], "postprocess": id},
    {"name": "row$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "row$ebnf$1", "symbols": ["row$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "row", "symbols": ["row$ebnf$1"], "postprocess": id}
]
  , ParserStart: "list"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
